package com.example.cahierdeson;

import android.content.ContentValues;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;

public class ElevesBDD {

	private static final int VERSION_BDD = 1;
	private static final String NOM_BDD = "cahierdeson.db";

	//nom des champs de la table eleves
	private static final String TABLE_ELEVES = "Eleves";
	private static final String COL_ID = "id_eleve";
	private static final int NUM_COL_ID = 0;
	private static final String COL_NOM = "nom";
	private static final int NUM_COL_NOM = 1;
	private static final String COL_PRENOM = "prenom";
	private static final int NUM_COL_PRENOM = 2;
	private static final String COL_SURNOM = "surnom";
	private static final int NUM_COL_SURNOM = 3;
	private static final String COL_PASS = "mot_de_pass";
	private static final int NUM_COL_PASS = 4;
	private static final String COL_CLASSE = "classe";
	private static final int NUM_COL_CLASSE = 5;
	private static final String COL_PHOTO_PROFIL = "lien_photo_profil ";
	private static final int NUM_COL__PHOTO_PROFIL = 6;
	
 
	private SQLiteDatabase bdd;
 
	private BDCahierDeSon maBaseSQLite;
 
	public ElevesBDD(Context context){
		//On créer la BDD et sa table
		maBaseSQLite = new BDCahierDeSon(context, NOM_BDD, null, VERSION_BDD);
	}
 
	public void open(){
		//on ouvre la BDD en écriture
		bdd = maBaseSQLite.getWritableDatabase();
	}
 
	public void close(){
		//on ferme l'accès à la BDD
		bdd.close();
	}
 
	public SQLiteDatabase getBDD(){
		return bdd;
	}
 
	public long insertEleve(Eleve eleve){
		//Création d'un ContentValues (fonctionne comme une HashMap)
		ContentValues values = new ContentValues();
		//on lui ajoute une valeur associé à une clé (qui est le nom de la colonne dans laquelle on veut mettre la valeur)
		values.put(COL_ID, eleve.getId());
		values.put(COL_NOM, eleve.getNom());
		values.put(COL_PRENOM, eleve.getPrenom());
		values.put(COL_SURNOM, eleve.getSurnom());
		values.put(COL_CLASSE, eleve.getClasse());
		values.put(COL_PASS, eleve.getMotDePasse());
		values.put(COL_PHOTO_PROFIL, eleve.getLienImage());
		
		
		//on insère l'objet dans la BDD via le ContentValues
		return bdd.insert(TABLE_, null, values);
	}
 
	public int updateLivre(int id, Livre livre){
		//La mise à jour d'un livre dans la BDD fonctionne plus ou moins comme une insertion
		//il faut simple préciser quelle livre on doit mettre à jour grâce à l'ID
		ContentValues values = new ContentValues();
		values.put(COL_ISBN, livre.getIsbn());
		values.put(COL_TITRE, livre.getTitre());
		return bdd.update(TABLE_LIVRES, values, COL_ID + " = " +id, null);
	}
 
	public int removeLivreWithID(int id){
		//Suppression d'un livre de la BDD grâce à l'ID
		return bdd.delete(TABLE_LIVRES, COL_ID + " = " +id, null);
	}
 
	public Livre getLivreWithTitre(String titre){
		//Récupère dans un Cursor les valeur correspondant à un livre contenu dans la BDD (ici on sélectionne le livre grâce à son titre)
		Cursor c = bdd.query(TABLE_LIVRES, new String[] {COL_ID, COL_ISBN, COL_TITRE}, COL_TITRE + " LIKE \"" + titre +"\"", null, null, null, null);
		return cursorToLivre(c);
	}
 
	//Cette méthode permet de convertir un cursor en un livre
	private Livre cursorToLivre(Cursor c){
		//si aucun élément n'a été retourné dans la requête, on renvoie null
		if (c.getCount() == 0)
			return null;
 
		//Sinon on se place sur le premier élément
		c.moveToFirst();
		//On créé un livre
		Livre livre = new Livre();
		//on lui affecte toutes les infos grâce aux infos contenues dans le Cursor
		livre.setId(c.getInt(NUM_COL_ID));
		livre.setIsbn(c.getString(NUM_COL_ISBN));
		livre.setTitre(c.getString(NUM_COL_TITRE));
		//On ferme le cursor
		c.close();
 
		//On retourne le livre
		return livre;
	}
}
